namespace = egs_apprentice
@searchDistance1 = 70


# MODDER BEWARE 

# When I initally wrote all of this I devised a "clever" way to avoid to have to copy system initalisers
# I had the manual initaliser for the init system - the modifed black hole, that was tagged with a flag i could search for
# then after that I would spawn the system
# then perform a random_system = { check, limited by distance from the inital spawn system
# safe in the knowledge that my newly spawned system woudl be the only thing in range as i was miles outside the galatic rim.  
# (see the below code example)
# This allows reusing the vanilla system initalisers and made the code somewhat generic
# This works fine under light load - e.g. small galaxies
# However it turns out that the distances bbetween stars are calculated as a background thread.
# So if the system is under heavy load (like when its just generated a galaxy at game start, or is a large galaxy)
# then they are not generated immiedately.
# Net result was that random distances looks would just randomly fail, destroying the cluster, as now a star was missing
# so all stars that were generated from that star would also be missing
# often resulting in no home planet, or a disconnectec conselation
# Thus i have had to fall back to the method you see below, having my own custom copy of system initalisers
# which set a star flag i can search for
# star flags are cached on the foreground thread, so there are no lookup issues.

# create the star
# event_target:egs_cluster_01 = {
# 	spawn_system = {
# 		min_distance >= 37
# 		max_distance <= 41
# 		min_orientation_angle = 277
# 		max_orientation_angle = 283
# 		initializer = egs_special_init_09 # pulsar
# 	}
# }

# # find the star
# random_system = {
# 	limit = {
# 		distance = {
# 			source = event_target:egs_cluster_01
# 			max_distance <= @searchDistance1
# 		}
# 		NOT = { has_star_flag = egs_cluster }
# 	}
# 	save_event_target_as = egs_cluster_02
# 	set_star_flag = egs_cluster
# 	set_star_flag = egs_2 
# }



country_event = {
	id = egs_apprentice.1
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		#compatability with extragalatic clusters
		set_global_flag = extragalactic_4_spawned
		set_spawn_system_batch = begin
		# No scope puts our relative coordinate as the galatic centre
		no_scope = {
			#
			# ROOT
			#
			spawn_system = {
				min_distance >=  560 
				max_distance <=  561 
				min_orientation_angle = 314
				max_orientation_angle = 315
				initializer = egs_cluster_initializer
			}
		}
		#Find the star
		random_system = {
			limit = { has_star_flag = egs_init_system }
			#also set the targets for the first star
			save_event_target_as = egs_cluster_root
			save_event_target_as = egs_cluster_01
		}


		#
		# STAR 2
		#

		# create the star
		event_target:egs_cluster_01 = {
			spawn_system = {
				min_distance >= 37
				max_distance <= 41
				min_orientation_angle = 277
				max_orientation_angle = 283
				initializer = egs_special_init_09 # pulsar
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_2
			}
			save_event_target_as = egs_cluster_02
			set_star_flag = egs_cluster
			set_star_flag = egs_2 
		}

		#
		# STAR 3
		#
		# create the star
		if = {
			limit = {
				num_guaranteed_colonies >= 2
			}
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 200
					max_orientation_angle = 205
					initializer = egs_neighbor_t2_second_colony
				}
			}
		}
		else_if = {
			limit = {
				egs_gigastructures = yes
			}
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 200
					max_orientation_angle = 205
					initializer = egs_special_init_01 # black hole
				}
			}
		}
		else = {
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 200
					max_orientation_angle = 205
					initializer = egs_trinary_init_02
				}
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_3
			}
			save_event_target_as = egs_cluster_03
			set_star_flag = egs_cluster
			set_star_flag = egs_3
			if = {
				limit = {
					num_guaranteed_colonies >= 2
				}
				set_star_flag = egs_habitable_spawn
			}
		}

		#
		# STAR 4
		#

		# create the star
		if = {
			limit = {
				has_country_flag = EGS_KERBAL_YES
			}
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 26
					max_distance <= 31
					min_orientation_angle = 162
					max_orientation_angle = 168
					initializer = egs_kerbal_space_program
				}
			}
		}
		else = {
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 26
					max_distance <= 31
					min_orientation_angle = 162
					max_orientation_angle = 168
					initializer = egs_basic_init_05
				}
			}
		}
		
		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_4
			}
			save_event_target_as = egs_cluster_04
			set_star_flag = egs_cluster
			set_star_flag = egs_4
		}

		#
		# STAR 5
		#

		# create the star
		event_target:egs_cluster_01 = {
			spawn_system = {
				min_distance >= 22
				max_distance <= 25
				min_orientation_angle = 105
				max_orientation_angle = 110
				initializer = egs_special_init_08 #neutron
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_5
			}
			save_event_target_as = egs_cluster_05
			set_star_flag = egs_cluster
			set_star_flag = egs_5
		}

		
		#
		# STAR 6
		#

		# create the star
		event_target:egs_cluster_01 = {
			spawn_system = {
				min_distance >= 27
				max_distance <= 32
				min_orientation_angle = 45
				max_orientation_angle = 50
				initializer = egs_asteroid_init_01 
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_6
			}
			save_event_target_as = egs_cluster_06
			set_star_flag = egs_cluster
			set_star_flag = egs_6
		}

		#
		# STAR 7
		#

		# create the star
		event_target:egs_cluster_01 = {
			spawn_system = {
				min_distance >= 22
				max_distance <= 27
				min_orientation_angle = 5
				max_orientation_angle = 9
				initializer = egs_basic_init_04
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_7
			}
			save_event_target_as = egs_cluster_07
			set_star_flag = egs_cluster
			set_star_flag = egs_7
		}


		# The below stars are created relative to other stars.
		# Technically they could all have been done in the above blocks
		# But I find it easier to read this way

		#
		# STAR 8
		#

		# create the star
		event_target:egs_cluster_05 = {
			spawn_system = {
				min_distance >= 40
				max_distance <= 43
				min_orientation_angle = 96
				max_orientation_angle = 99
				initializer =  egs_sca_init #class A star
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_8
			}
			save_event_target_as = egs_cluster_08
			set_star_flag = egs_cluster
			set_star_flag = egs_8
		}

		#
		# STAR 9
		#

		# create the star
		if = {
			limit = {
				has_country_flag = EGS_START_SOL 
			}
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_sol_system_initializer
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_DENEB 
			}
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_deneb_system
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_RINGWORLD 
			}
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_ringworld_init
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_STARBORN
			}
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = starborn_system
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_RANDOM_TRINARY 
			}
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_random_empire_init_05
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_RANDOM_BINARY 
			}
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_random_empire_init_06
				}
			}
		}
		else = {
			event_target:egs_cluster_06 = {
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_random_empire_init_01
				}
			}
		}
		

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_empire_home_system
			}
			save_event_target_as = egs_cluster_09
			set_star_flag = egs_cluster
			set_star_flag = egs_9
			set_star_flag = egs_empire_home
		}

		#
		# STAR 10
		#

		# create the star
		if = {
			limit = {
				num_guaranteed_colonies >= 1
			}
			event_target:egs_cluster_07 = {
				spawn_system = {
					min_distance >= 29
					max_distance <= 33
					min_orientation_angle = 13
					max_orientation_angle = 16
					initializer = egs_neighbor_t1_first_colony
				}
			}
		}
		else_if = {
			limit = {
				egs_gigastructures = yes
			}
			event_target:egs_cluster_07 = {
				spawn_system = {
					min_distance >= 29
					max_distance <= 33
					min_orientation_angle = 13
					max_orientation_angle = 16
					initializer = egs_basic_init_06
				}
			}
		}
		else = {
			event_target:egs_cluster_07 = {
				spawn_system = {
					min_distance >= 29
					max_distance <= 33
					min_orientation_angle = 13
					max_orientation_angle = 16
					initializer = egs_binary_init_02
				}
			}
		}		

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_10
			}
			save_event_target_as = egs_cluster_10
			set_star_flag = egs_cluster
			set_star_flag = egs_10
			if = {
				limit = {
					num_guaranteed_colonies >= 1
				}
				set_star_flag = egs_habitable_spawn
			}
			
		}

		#
		# STAR 11
		#

		# create the star
		event_target:egs_cluster_09 = {
			spawn_system = {
				min_distance >= 24
				max_distance <= 29
				min_orientation_angle = 66
				max_orientation_angle = 71
				initializer = egs_basic_init_06_2
			}
		}

		# find the star
		random_system = {
			limit = {
				has_star_flag = egs_app_11
			}
			save_event_target_as = egs_cluster_11
			set_star_flag = egs_cluster
			set_star_flag = egs_11
		}

		# clear all hyperlanes to and within the cluster
		every_system = {
			limit = { has_star_flag = egs_cluster }
			isolate_system = yes
		}

		#create the cluster hyperlanes
		
		add_hyperlane = {
			from = event_target:egs_cluster_01
			to = event_target:egs_cluster_02
		}
		add_hyperlane = {
			from = event_target:egs_cluster_01
			to = event_target:egs_cluster_03
		}
		add_hyperlane = {
			from = event_target:egs_cluster_01
			to = event_target:egs_cluster_04
		}
		add_hyperlane = {
			from = event_target:egs_cluster_01
			to = event_target:egs_cluster_05
		}
		add_hyperlane = {
			from = event_target:egs_cluster_01
			to = event_target:egs_cluster_06
		}
		add_hyperlane = {
			from = event_target:egs_cluster_01
			to = event_target:egs_cluster_07
		}
		add_hyperlane = {
			from = event_target:egs_cluster_03
			to = event_target:egs_cluster_04
		}
		add_hyperlane = {
			from = event_target:egs_cluster_05
			to = event_target:egs_cluster_08
		}
		add_hyperlane = {
			from = event_target:egs_cluster_07
			to = event_target:egs_cluster_10
		}
		add_hyperlane = {
			from = event_target:egs_cluster_09
			to = event_target:egs_cluster_06
		}
		add_hyperlane = {
			from = event_target:egs_cluster_09
			to = event_target:egs_cluster_10
		}
		add_hyperlane = {
			from = event_target:egs_cluster_09
			to = event_target:egs_cluster_11
		}
		

		set_spawn_system_batch = end


		country_event = { id = egs_colony.1 }


	}


	
}