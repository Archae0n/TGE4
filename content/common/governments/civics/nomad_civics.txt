#civic_example = {
#	playable = {}								# AND trigger, no scope; use this to prevent the civic from being selectable by the player (UI)
#	potential = {}								# requirements list, see ../readme_requirements.txt
#	possible = {}								# requirements list, see ../readme_requirements.txt
#	pickable_at_start = yes / no				# default: yes
#	modification = yes / no						# default: yes, set to no to prevent adding or removing this after creation of the empire
#
#	random_weight = { base = 1 }				# scriptable weight for randomizing a civic; required, else the civic will not get assigned randomly
#
#	modifier = {}								# modifier added to the country if the civic is selected and valid
#	can_build_ruler_military_station = yes / no	# default: no
#	can_build_ruler_ship = yes / no				# default: no
#}

### Nomad Civics

civic_nomads = {
	modification = no
	icon = "gfx/interface/icons/governments/civics/civic_nomads.dds"
	potential = { ethics = { NOT = { value = ethic_gestalt_consciousness } } }
	possible = {
		civics = {
			NOR = {
				value = civic_marauders
				value = civic_reavers
				value = civic_post_apocalyptic
				value = civic_life_seeded
				value = civic_fanatic_purifiers
			}
		}
	}
	random_weight = {
		base = 0
		modifier = {
			# civic has no efect after galaxy generation, disable for random generation
			factor = 0
			has_global_flag = game_started
		}
	}

	description = "civic_tooltip_nomad_effects"
	modifier = {
		spaceport_ship_build_cost_mult = -0.15
		station_gatherers_produces_mult = 0.5
	}
	
	traits = {
		trait = trait_void_farer
	}
}

civic_marauders = {
	modification = no
	icon = "gfx/interface/icons/governments/civics/civic_marauders.dds"
	potential = { authority = { value = ethic_gestalt_consciousness } }
	possible = {
		ethics = {
			OR = {
				value = ethic_fanatic_xenophobe
				value = ethic_xenophobe
				value = ethic_militarist
				value = ethic_fanatic_militarist
			}
		}
		civics = {
			NOR = {
				value = civic_nomads
				value = civic_syncretic_evolution
				value = civic_mechanists
				value = civic_post_apocalyptic
				value = civic_life_seeded
				value = civic_fanatic_purifiers
			}
		}
	}
	random_weight = {
		base = 0
		modifier = {
			# civic has no efect after galaxy generation, disable for random generation
			factor = 0
			has_global_flag = game_started
		}
	}
	description = "civic_tooltip_marauders_effects"
	modifier = {
		spaceport_ship_build_cost_mult = -0.15
		station_gatherers_produces_mult = 0.5
	}

	traits = {
		trait = trait_void_farer
	}
}

civic_reavers = {
	homeworld = pc_habitat
	modification = no
	icon = "gfx/interface/icons/governments/civics/civic_reavers_2.dds"
	potential = { authority = { value = ethic_gestalt_consciousness } }
	possible = {
		ethics = {
			value = ethic_fanatic_xenophobe
			OR = {
				value = ethic_militarist
				value = ethic_materialist
				value = ethic_spiritualist
			}		
		}
		civics = {
			NOR = {
			value = civic_nomads
			value = civic_marauders
			value = civic_syncretic_evolution
			value = civic_mechanists
			value = civic_post_apocalyptic
			value = civic_life_seeded
			value = civic_fanatic_purifiers
			}
		}
	}
	random_weight = {
		base = 0
		modifier = {
			# civic has no efect after galaxy generation, disable for random generation
			factor = 0
			has_global_flag = game_started
		}
	}
	description = "civic_tooltip_reavers_effects"
	modifier = {
		ship_weapon_damage = 0.15
		ship_fire_rate_mult = 0.22
		spaceport_ship_build_cost_mult = -0.25
		navy_size_mult = 0.33
		station_gatherers_produces_mult = 0.5
	}
	traits = {
		trait = trait_void_farer
	}
}

civic_ancient_drones = {
	homeworld = pc_habitat
	modification = no
	potential = { authority = { value = auth_machine_intelligence } }
	possible = {
		civics = { NOR = { value =  } }
	}
	random_weight = {
		base = 0
		modifier = {
			# civic has no efect after galaxy generation, disable for random generation
			factor = 0
			has_global_flag = game_started
		}
	}
	description = "civic_tooltip_ancient_drones_effects"
	
	modifier = {
		station_gatherers_produces_mult = 0.5
	}
	
	traits = {
		trait = trait_bit_degradation
	}
}
